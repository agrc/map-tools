{"version":3,"sources":["_src/extentRouter.js"],"names":["define","hash","ioQuery","watchUtils","Point","updateExtentHash","mapView","console","log","arguments","scale","zoom","center","newProps","Object","assign","queryToObject","x","Math","round","y","rount","objectToQuery","urlObj","options","parseInt","spatialReference","wkid","when","whenTrue","bind"],"mappings":"AAAAA,OAAO,CACH,WADG,EAEH,eAFG,EAIH,sBAJG,EAKH,qBALG,CAAP,EAMG,UACCC,IADD,EAECC,OAFD,EAICC,UAJD,EAKCC,KALD,EAMD;AACE,QAAMC,mBAAmB,SAAnBA,gBAAmB,CAAUC,OAAV,EAAmB;AACxC;AACA;AACA;AACAC,gBAAQC,GAAR,CAAY,yCAAZ,EAAuDC,SAAvD;;AAEA,YAAK,CAACH,QAAQI,KAAT,IAAkB,CAACJ,QAAQK,IAA5B,IAAqC,CAACL,QAAQM,MAAlD,EAA0D;AACtD;AACH;;AAED,YAAMA,SAASN,QAAQM,MAAvB;AACA;AACA,YAAMC,WAAWC,OAAOC,MAAP,CAAcb,QAAQc,aAAR,CAAsBf,MAAtB,CAAd,EAA6C;AAC1DgB,eAAGC,KAAKC,KAAL,CAAWP,OAAOK,CAAlB,CADuD;AAE1DG,eAAGF,KAAKC,KAAL,CAAWP,OAAOQ,CAAlB;AAFuD,SAA7C,CAAjB;;AAKA,YAAId,QAAQK,IAAZ,EAAkB;AACdE,qBAASF,IAAT,GAAgBL,QAAQK,IAAxB;AACH,SAFD,MAEO;AACHE,qBAASH,KAAT,GAAiBQ,KAAKG,KAAL,CAAWf,QAAQI,KAAnB,CAAjB;AACH;;AAED,eAAOT,KAAKC,QAAQoB,aAAR,CAAsBT,QAAtB,CAAL,EAAsC,IAAtC,CAAP;AACH,KAxBD;;AA0BA,WAAO,UAAUP,OAAV,EAAmB;AACtB;AACA;AACA;AACAC,gBAAQC,GAAR,CAAY,oCAAZ,EAAkDC,SAAlD;;AAEA,YAAMc,SAASrB,QAAQc,aAAR,CAAsBf,MAAtB,CAAf;AACA,YAAMuB,UAAU;AACZd,mBAAOe,SAASF,OAAOb,KAAhB,EAAuB,EAAvB,CADK;AAEZE,oBAAQ,IAAIR,KAAJ,CAAU;AACda,mBAAGQ,SAASF,OAAON,CAAhB,EAAmB,EAAnB,CADW;AAEdG,mBAAGK,SAASF,OAAOH,CAAhB,EAAmB,EAAnB,CAFW;AAGdM,kCAAkB,EAACC,MAAM,IAAP;AAHJ,aAAV,CAFI;AAOZhB,kBAAMc,SAASF,OAAOZ,IAAhB,EAAsB,EAAtB;AAPM,SAAhB;AASAL,gBAAQsB,IAAR,CAAa,YAAM;AACf,gBAAIJ,QAAQZ,MAAR,CAAeK,CAAf,IAAoBO,QAAQZ,MAAR,CAAeQ,CAAnC,KAAyCI,QAAQd,KAAR,IAAiBc,QAAQb,IAAlE,CAAJ,EAA6E;AACzE,oBAAIa,QAAQb,IAAZ,EAAkB;AACdL,4BAAQK,IAAR,GAAea,QAAQb,IAAvB;AACH,iBAFD,MAEO;AACHL,4BAAQI,KAAR,GAAgBc,QAAQd,KAAxB;AACH;;AAEDJ,wBAAQM,MAAR,GAAiBY,QAAQZ,MAAzB;AACH;AACDT,uBAAW0B,QAAX,CAAoBvB,OAApB,EAA6B,YAA7B,EAA2CD,iBAAiByB,IAAjB,CAAsB,IAAtB,EAA4BxB,OAA5B,CAA3C;AACH,SAXD;;AAaA;AACA,eAAOkB,OAAP;AACH,KA/BD;AAgCH,CAvED","file":"extentRouter.js","sourcesContent":["define([\n    'dojo/hash',\n    'dojo/io-query',\n\n    'esri/core/watchUtils',\n    'esri/geometry/Point'\n], function (\n    hash,\n    ioQuery,\n\n    watchUtils,\n    Point\n) {\n    const updateExtentHash = function (mapView) {\n        // summary:\n        //      sets the extent props in the url hash\n        // mapView: esri/views/mapView\n        console.log('map-tools/ExtentRouter:updateExtentHash', arguments);\n\n        if ((!mapView.scale && !mapView.zoom) || !mapView.center) {\n            return;\n        }\n\n        const center = mapView.center;\n        // mixin any existing url props to allow for other routers\n        const newProps = Object.assign(ioQuery.queryToObject(hash()), {\n            x: Math.round(center.x),\n            y: Math.round(center.y)\n        });\n\n        if (mapView.zoom) {\n            newProps.zoom = mapView.zoom;\n        } else {\n            newProps.scale = Math.rount(mapView.scale);\n        }\n\n        return hash(ioQuery.objectToQuery(newProps), true);\n    };\n\n    return function (mapView) {\n        // summary:\n        //      sets up the url router for persisting the map extent\n        // mapView: esri/views/mapView\n        console.log('map-tools/ExtentRouter:constructor', arguments);\n\n        const urlObj = ioQuery.queryToObject(hash());\n        const options = {\n            scale: parseInt(urlObj.scale, 10),\n            center: new Point({\n                x: parseInt(urlObj.x, 10),\n                y: parseInt(urlObj.y, 10),\n                spatialReference: {wkid: 3857}\n            }),\n            zoom: parseInt(urlObj.zoom, 10)\n        };\n        mapView.when(() => {\n            if (options.center.x && options.center.y && (options.scale || options.zoom)) {\n                if (options.zoom) {\n                    mapView.zoom = options.zoom;\n                } else {\n                    mapView.scale = options.scale;\n                }\n\n                mapView.center = options.center;\n            }\n            watchUtils.whenTrue(mapView, 'stationary', updateExtentHash.bind(null, mapView));\n        });\n\n        // return for unit tests assertion\n        return options;\n    };\n});\n"]}